# the following code is from opencv-python tutorial
# -*- coding: utf-8 -*-
"""
Created on Wed Dec 02 12:15:39 2015

@author: ....
"""

import cv2 
import numpy as np 
'''
import matplotlib.pyplot as plt
#randomly generate 25 points as training datasets and at least one test point to look for its near neighbor

# Feature set containing (x,y) values of 25 known/training data 
trainData = np.random.randint(0,100,(25,2)).astype(np.float32)
# Labels each one either Red or Blue with numbers 0 and 1 
responses = np.random.randint(0,2,(25,1)).astype(np.float32)
# Take Red families and plot them 
red = trainData[responses.ravel()==0] 
plt.scatter(red[:,0],red[:,1],80,'r','^')
# Take Blue families and plot them 
blue = trainData[responses.ravel()==1] 
plt.scatter(blue[:,0],blue[:,1],80,'b','s')
#plt.show()
newcomer = np.random.randint(0,100,(10,2)).astype(np.float32) 
plt.scatter(newcomer[:,0],newcomer[:,1],80,'g','o')
knn = cv2.KNearest() 
knn.train(trainData,responses) 
ret, results, neighbours ,dist = knn.find_nearest(newcomer, 3)
print "result: ", results,"\n" 
print "neighbours: ", neighbours,"\n" 
print "distance: ", dist
plt.show()
'''

'''
# handwriting digits classification



img = cv2.imread('digits.png') # 1000(rows)*2000(cols), totally 5000 handwriting digits, 50*100
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
# Now we split the image to 5000 cells, each 20x20 size 
cells = [np.hsplit(row,100) for row in np.vsplit(gray,50)]# first split 50 rows then each row split into 100 digits
# Make it into a Numpy array. It size will be (50,100,20,20) ,50 means 10 digits* 5rows per digits,100 means each row has 100 same digits
#0-9 each class has 5*100 samples
x = np.array(cells)# each element of X is zero
# Now we prepare train_data and test_data. 
train = x[:,:50].reshape(-1,400).astype(np.float32) # Size = (2500,400) 5*50=250 are used to be train samples 
test = x[:,50:100].reshape(-1,400).astype(np.float32) # Size = (2500,400) 5*50 =250 are used to be test samples
# Create labels for train and test data 
k = np.arange(10) 
train_labels = np.repeat(k,250)[:,np.newaxis]#2500 labels 
#test_labels = train_labels.copy()
test_labels =np.repeat(k,250)[:,np.newaxis]
# Initiate kNN, train the data, then test it with test data for k=1 
knn = cv2.KNearest() 
knn.train(train,train_labels) 
ret,result,neighbours,dist = knn.find_nearest(test,k=5)
# Now we check the accuracy of classification 
# For that, compare the result with test_labels and check which are wrong 
matches = result==test_labels 
correct = np.count_nonzero(matches) 
accuracy = correct*100.0/result.size 
print accuracy

np.savez('knn_data.npz',train=train, train_labels=train_labels)

# Now load the data 
with np.load('knn_data.npz') as data: 
    print data.files 
    train = data['train'] 
    train_labels = data['train_labels']
'''



# svm hog digits classification
SZ=20 
bin_n = 16 # Number of bins
svm_params = dict( kernel_type = cv2.SVM_LINEAR, svm_type = cv2.SVM_C_SVC, C=2.67, gamma=5.383 )
affine_flags = cv2.WARP_INVERSE_MAP|cv2.INTER_LINEAR
def deskew(img): 
    m = cv2.moments(img) 
    if abs(m['mu02']) < 1e-2: 
        return img.copy() 
    skew = m['mu11']/m['mu02'] 
    M = np.float32([[1, skew, -0.5*SZ*skew], [0, 1, 0]]) 
    img = cv2.warpAffine(img,M,(SZ, SZ),flags=affine_flags) 
    return img
    
    
def hog(img): 
    gx = cv2.Sobel(img, cv2.CV_32F, 1, 0) #1means x 1-order gradient ,0 means y 0-order gradient
    gy = cv2.Sobel(img, cv2.CV_32F, 0, 1) 
    mag, ang = cv2.cartToPolar(gx, gy) 
    bins = np.int32(bin_n*ang/(2*np.pi)) # quantizing binvalues in (0...16) 
    bin_cells = bins[:10,:10], bins[10:,:10], bins[:10,10:], bins[10:,10:] # 4 patches
    mag_cells = mag[:10,:10], mag[10:,:10], mag[:10,10:], mag[10:,10:] 
    hists = [np.bincount(b.ravel(), m.ravel(), bin_n) for b, m in zip(bin_cells, mag_cells)] 
    hist = np.hstack(hists) # hist is a 64 bit vector 
    return hist
    
    
img = cv2.imread('digits.png',0)
cells = [np.hsplit(row,100) for row in np.vsplit(img,50)]
# First half is trainData, remaining is testData 
train_cells = [ i[:50] for i in cells ] 
test_cells = [ i[50:] for i in cells]
###### Now training ########################
deskewed = [map(deskew,row) for row in train_cells] 
hogdata = [map(hog,row) for row in deskewed] 
trainData = np.float32(hogdata).reshape(-1,64) 
responses = np.float32(np.repeat(np.arange(10),250)[:,np.newaxis])
svm = cv2.SVM() 
svm.train(trainData,responses, params=svm_params) 
svm.save('svm_data.dat')
###### Now testing ########################
deskewed = [map(deskew,row) for row in test_cells] 
hogdata = [map(hog,row) for row in deskewed] 
testData = np.float32(hogdata).reshape(-1,bin_n*4) 
result = svm.predict_all(testData)
####### Check Accuracy ######################## 
mask = result==responses 
correct = np.count_nonzero(mask) 
print correct*100.0/result.size
